#include "catch/catch.hpp"
#include "pacif.hpp"

TEST_CASE("CIF parsing") {
    SECTION("ordinary char") {
        CHECK(pacif::parsing::is_ordinary_char('!'));
        CHECK(pacif::parsing::is_ordinary_char('%'));
        CHECK(pacif::parsing::is_ordinary_char('&'));
        CHECK(pacif::parsing::is_ordinary_char('('));
        CHECK(pacif::parsing::is_ordinary_char(')'));
        CHECK(pacif::parsing::is_ordinary_char('*'));
        CHECK(pacif::parsing::is_ordinary_char('+'));
        CHECK(pacif::parsing::is_ordinary_char(','));
        CHECK(pacif::parsing::is_ordinary_char('-'));
        CHECK(pacif::parsing::is_ordinary_char('.'));
        CHECK(pacif::parsing::is_ordinary_char('/'));
        CHECK(pacif::parsing::is_ordinary_char('0'));
        CHECK(pacif::parsing::is_ordinary_char('1'));
        CHECK(pacif::parsing::is_ordinary_char('2'));
        CHECK(pacif::parsing::is_ordinary_char('3'));
        CHECK(pacif::parsing::is_ordinary_char('4'));
        CHECK(pacif::parsing::is_ordinary_char('5'));
        CHECK(pacif::parsing::is_ordinary_char('6'));
        CHECK(pacif::parsing::is_ordinary_char('7'));
        CHECK(pacif::parsing::is_ordinary_char('8'));
        CHECK(pacif::parsing::is_ordinary_char('9'));
        CHECK(pacif::parsing::is_ordinary_char(':'));
        CHECK(pacif::parsing::is_ordinary_char('<'));
        CHECK(pacif::parsing::is_ordinary_char('='));
        CHECK(pacif::parsing::is_ordinary_char('>'));
        CHECK(pacif::parsing::is_ordinary_char('?'));
        CHECK(pacif::parsing::is_ordinary_char('@'));
        CHECK(pacif::parsing::is_ordinary_char('A'));
        CHECK(pacif::parsing::is_ordinary_char('B'));
        CHECK(pacif::parsing::is_ordinary_char('C'));
        CHECK(pacif::parsing::is_ordinary_char('D'));
        CHECK(pacif::parsing::is_ordinary_char('E'));
        CHECK(pacif::parsing::is_ordinary_char('F'));
        CHECK(pacif::parsing::is_ordinary_char('G'));
        CHECK(pacif::parsing::is_ordinary_char('H'));
        CHECK(pacif::parsing::is_ordinary_char('I'));
        CHECK(pacif::parsing::is_ordinary_char('J'));
        CHECK(pacif::parsing::is_ordinary_char('K'));
        CHECK(pacif::parsing::is_ordinary_char('L'));
        CHECK(pacif::parsing::is_ordinary_char('M'));
        CHECK(pacif::parsing::is_ordinary_char('N'));
        CHECK(pacif::parsing::is_ordinary_char('O'));
        CHECK(pacif::parsing::is_ordinary_char('P'));
        CHECK(pacif::parsing::is_ordinary_char('Q'));
        CHECK(pacif::parsing::is_ordinary_char('R'));
        CHECK(pacif::parsing::is_ordinary_char('S'));
        CHECK(pacif::parsing::is_ordinary_char('T'));
        CHECK(pacif::parsing::is_ordinary_char('U'));
        CHECK(pacif::parsing::is_ordinary_char('V'));
        CHECK(pacif::parsing::is_ordinary_char('W'));
        CHECK(pacif::parsing::is_ordinary_char('X'));
        CHECK(pacif::parsing::is_ordinary_char('Y'));
        CHECK(pacif::parsing::is_ordinary_char('Z'));
        CHECK(pacif::parsing::is_ordinary_char('\\'));
        CHECK(pacif::parsing::is_ordinary_char('^'));
        CHECK(pacif::parsing::is_ordinary_char('`'));
        CHECK(pacif::parsing::is_ordinary_char('a'));
        CHECK(pacif::parsing::is_ordinary_char('b'));
        CHECK(pacif::parsing::is_ordinary_char('c'));
        CHECK(pacif::parsing::is_ordinary_char('d'));
        CHECK(pacif::parsing::is_ordinary_char('e'));
        CHECK(pacif::parsing::is_ordinary_char('f'));
        CHECK(pacif::parsing::is_ordinary_char('g'));
        CHECK(pacif::parsing::is_ordinary_char('h'));
        CHECK(pacif::parsing::is_ordinary_char('i'));
        CHECK(pacif::parsing::is_ordinary_char('j'));
        CHECK(pacif::parsing::is_ordinary_char('k'));
        CHECK(pacif::parsing::is_ordinary_char('l'));
        CHECK(pacif::parsing::is_ordinary_char('m'));
        CHECK(pacif::parsing::is_ordinary_char('n'));
        CHECK(pacif::parsing::is_ordinary_char('o'));
        CHECK(pacif::parsing::is_ordinary_char('p'));
        CHECK(pacif::parsing::is_ordinary_char('q'));
        CHECK(pacif::parsing::is_ordinary_char('r'));
        CHECK(pacif::parsing::is_ordinary_char('s'));
        CHECK(pacif::parsing::is_ordinary_char('t'));
        CHECK(pacif::parsing::is_ordinary_char('u'));
        CHECK(pacif::parsing::is_ordinary_char('v'));
        CHECK(pacif::parsing::is_ordinary_char('w'));
        CHECK(pacif::parsing::is_ordinary_char('x'));
        CHECK(pacif::parsing::is_ordinary_char('y'));
        CHECK(pacif::parsing::is_ordinary_char('z'));
        CHECK(pacif::parsing::is_ordinary_char('{'));
        CHECK(pacif::parsing::is_ordinary_char('|'));
        CHECK(pacif::parsing::is_ordinary_char('}'));
        CHECK(pacif::parsing::is_ordinary_char('~'));
    }

    SECTION("non blank char") {
        // All the ordinary chars
        CHECK(pacif::parsing::is_non_blank_char('!'));
        CHECK(pacif::parsing::is_non_blank_char('%'));
        CHECK(pacif::parsing::is_non_blank_char('&'));
        CHECK(pacif::parsing::is_non_blank_char('('));
        CHECK(pacif::parsing::is_non_blank_char(')'));
        CHECK(pacif::parsing::is_non_blank_char('*'));
        CHECK(pacif::parsing::is_non_blank_char('+'));
        CHECK(pacif::parsing::is_non_blank_char(','));
        CHECK(pacif::parsing::is_non_blank_char('-'));
        CHECK(pacif::parsing::is_non_blank_char('.'));
        CHECK(pacif::parsing::is_non_blank_char('/'));
        CHECK(pacif::parsing::is_non_blank_char('0'));
        CHECK(pacif::parsing::is_non_blank_char('1'));
        CHECK(pacif::parsing::is_non_blank_char('2'));
        CHECK(pacif::parsing::is_non_blank_char('3'));
        CHECK(pacif::parsing::is_non_blank_char('4'));
        CHECK(pacif::parsing::is_non_blank_char('5'));
        CHECK(pacif::parsing::is_non_blank_char('6'));
        CHECK(pacif::parsing::is_non_blank_char('7'));
        CHECK(pacif::parsing::is_non_blank_char('8'));
        CHECK(pacif::parsing::is_non_blank_char('9'));
        CHECK(pacif::parsing::is_non_blank_char(':'));
        CHECK(pacif::parsing::is_non_blank_char('<'));
        CHECK(pacif::parsing::is_non_blank_char('='));
        CHECK(pacif::parsing::is_non_blank_char('>'));
        CHECK(pacif::parsing::is_non_blank_char('?'));
        CHECK(pacif::parsing::is_non_blank_char('@'));
        CHECK(pacif::parsing::is_non_blank_char('A'));
        CHECK(pacif::parsing::is_non_blank_char('B'));
        CHECK(pacif::parsing::is_non_blank_char('C'));
        CHECK(pacif::parsing::is_non_blank_char('D'));
        CHECK(pacif::parsing::is_non_blank_char('E'));
        CHECK(pacif::parsing::is_non_blank_char('F'));
        CHECK(pacif::parsing::is_non_blank_char('G'));
        CHECK(pacif::parsing::is_non_blank_char('H'));
        CHECK(pacif::parsing::is_non_blank_char('I'));
        CHECK(pacif::parsing::is_non_blank_char('J'));
        CHECK(pacif::parsing::is_non_blank_char('K'));
        CHECK(pacif::parsing::is_non_blank_char('L'));
        CHECK(pacif::parsing::is_non_blank_char('M'));
        CHECK(pacif::parsing::is_non_blank_char('N'));
        CHECK(pacif::parsing::is_non_blank_char('O'));
        CHECK(pacif::parsing::is_non_blank_char('P'));
        CHECK(pacif::parsing::is_non_blank_char('Q'));
        CHECK(pacif::parsing::is_non_blank_char('R'));
        CHECK(pacif::parsing::is_non_blank_char('S'));
        CHECK(pacif::parsing::is_non_blank_char('T'));
        CHECK(pacif::parsing::is_non_blank_char('U'));
        CHECK(pacif::parsing::is_non_blank_char('V'));
        CHECK(pacif::parsing::is_non_blank_char('W'));
        CHECK(pacif::parsing::is_non_blank_char('X'));
        CHECK(pacif::parsing::is_non_blank_char('Y'));
        CHECK(pacif::parsing::is_non_blank_char('Z'));
        CHECK(pacif::parsing::is_non_blank_char('\\'));
        CHECK(pacif::parsing::is_non_blank_char('^'));
        CHECK(pacif::parsing::is_non_blank_char('`'));
        CHECK(pacif::parsing::is_non_blank_char('a'));
        CHECK(pacif::parsing::is_non_blank_char('b'));
        CHECK(pacif::parsing::is_non_blank_char('c'));
        CHECK(pacif::parsing::is_non_blank_char('d'));
        CHECK(pacif::parsing::is_non_blank_char('e'));
        CHECK(pacif::parsing::is_non_blank_char('f'));
        CHECK(pacif::parsing::is_non_blank_char('g'));
        CHECK(pacif::parsing::is_non_blank_char('h'));
        CHECK(pacif::parsing::is_non_blank_char('i'));
        CHECK(pacif::parsing::is_non_blank_char('j'));
        CHECK(pacif::parsing::is_non_blank_char('k'));
        CHECK(pacif::parsing::is_non_blank_char('l'));
        CHECK(pacif::parsing::is_non_blank_char('m'));
        CHECK(pacif::parsing::is_non_blank_char('n'));
        CHECK(pacif::parsing::is_non_blank_char('o'));
        CHECK(pacif::parsing::is_non_blank_char('p'));
        CHECK(pacif::parsing::is_non_blank_char('q'));
        CHECK(pacif::parsing::is_non_blank_char('r'));
        CHECK(pacif::parsing::is_non_blank_char('s'));
        CHECK(pacif::parsing::is_non_blank_char('t'));
        CHECK(pacif::parsing::is_non_blank_char('u'));
        CHECK(pacif::parsing::is_non_blank_char('v'));
        CHECK(pacif::parsing::is_non_blank_char('w'));
        CHECK(pacif::parsing::is_non_blank_char('x'));
        CHECK(pacif::parsing::is_non_blank_char('y'));
        CHECK(pacif::parsing::is_non_blank_char('z'));
        CHECK(pacif::parsing::is_non_blank_char('{'));
        CHECK(pacif::parsing::is_non_blank_char('|'));
        CHECK(pacif::parsing::is_non_blank_char('}'));
        CHECK(pacif::parsing::is_non_blank_char('~'));
        // Other non blank chars
        CHECK(pacif::parsing::is_non_blank_char('"'));
        CHECK(pacif::parsing::is_non_blank_char('\''));
        CHECK(pacif::parsing::is_non_blank_char('$'));
        CHECK(pacif::parsing::is_non_blank_char('#'));
        CHECK(pacif::parsing::is_non_blank_char('_'));
        CHECK(pacif::parsing::is_non_blank_char(';'));
        CHECK(pacif::parsing::is_non_blank_char('['));
        CHECK(pacif::parsing::is_non_blank_char(']'));
    }

    SECTION("tags") {
        std::vector<std::string> TAGS = {
            "_f",
            "_foo",
            "_symmetry_space_group_name_H-M",
            "_;;;$$$$######'''''",
        };

        for (auto& tag: TAGS) {
            CHECK(pacif::parsing::is_tag_name(tag.begin(), tag.end()));
        }

        std::vector<std::string> NOT_TAGS = {
            "f",
            "_",
            "_à",
            "_not_ascii_é",
        };

        for (auto& tag: NOT_TAGS) {
            CHECK_FALSE(pacif::parsing::is_tag_name(tag.begin(), tag.end()));
        }
    }
}
